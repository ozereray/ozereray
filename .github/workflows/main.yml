<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>GitHub Contribution Graph Snake Game</title>
  <style>
    body {
      font-family: 'Arial', sans-serif;
      background-color: #f0f0f0;
      margin: 0;
      padding: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      flex-direction: column;
    }

    canvas {
      background-color: #1a1a1a;
      box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
    }

    h1 {
      color: #333;
    }

    .game-info {
      margin-top: 20px;
      font-size: 18px;
      color: #333;
    }
  </style>
</head>
<body>
  <h1>GitHub Contribution Graph Snake Game</h1>
  <canvas id="gameCanvas" width="400" height="400"></canvas>
  <div class="game-info">
    <p>Use arrow keys to move the snake.</p>
    <p>Press "R" to restart the game.</p>
  </div>

  <script>
    const canvas = document.getElementById("gameCanvas");
    const ctx = canvas.getContext("2d");

    const scale = 20;
    const rows = canvas.height / scale;
    const columns = canvas.width / scale;

    let snake;
    let apple;
    let gameInterval;

    // Initialize the game
    function initGame() {
      snake = new Snake();
      apple = new Apple();
      if (gameInterval) clearInterval(gameInterval);
      gameInterval = setInterval(gameLoop, 100);
    }

    // Game loop
    function gameLoop() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      snake.update();
      snake.draw();
      apple.draw();
      
      // Check collision with apple
      if (snake.collideWithApple(apple)) {
        apple.randomizePosition();
        snake.grow();
      }

      // Check collision with walls
      if (snake.collideWithWall() || snake.collideWithSelf()) {
        clearInterval(gameInterval);
        alert("Game Over! Press 'R' to restart.");
      }
    }

    // Snake class
    class Snake {
      constructor() {
        this.body = [{ x: 5, y: 5 }];
        this.direction = "RIGHT";
      }

      update() {
        const head = { ...this.body[0] };

        if (this.direction === "LEFT") head.x -= 1;
        if (this.direction === "RIGHT") head.x += 1;
        if (this.direction === "UP") head.y -= 1;
        if (this.direction === "DOWN") head.y += 1;

        this.body.unshift(head);
        this.body.pop();
      }

      draw() {
        ctx.fillStyle = "#00FF00"; // Snake color
        for (let i = 0; i < this.body.length; i++) {
          const part = this.body[i];
          ctx.fillRect(part.x * scale, part.y * scale, scale, scale);
        }
      }

      grow() {
        const tail = this.body[this.body.length - 1];
        this.body.push({ x: tail.x, y: tail.y });
      }

      collideWithApple(apple) {
        const head = this.body[0];
        return head.x === apple.position.x && head.y === apple.position.y;
      }

      collideWithWall() {
        const head = this.body[0];
        return head.x < 0 || head.y < 0 || head.x >= columns || head.y >= rows;
      }

      collideWithSelf() {
        const head = this.body[0];
        for (let i = 1; i < this.body.length; i++) {
          if (this.body[i].x === head.x && this.body[i].y === head.y) return true;
        }
        return false;
      }

      setDirection(newDirection) {
        // Prevent snake from reversing
        if (
          (this.direction === "LEFT" && newDirection !== "RIGHT") ||
          (this.direction === "RIGHT" && newDirection !== "LEFT") ||
          (this.direction === "UP" && newDirection !== "DOWN") ||
          (this.direction === "DOWN" && newDirection !== "UP")
        ) {
          this.direction = newDirection;
        }
      }
    }

    // Apple class
    class Apple {
      constructor() {
        this.position = { x: 10, y: 10 };
      }

      randomizePosition() {
        this.position = {
          x: Math.floor(Math.random() * columns),
          y: Math.floor(Math.random() * rows),
        };
      }

      draw() {
        ctx.fillStyle = "#FF0000"; // Apple color
        ctx.fillRect(this.position.x * scale, this.position.y * scale, scale, scale);
      }
    }

    // Key event listener
    document.addEventListener("keydown", (event) => {
      if (event.key === "ArrowLeft") {
        snake.setDirection("LEFT");
      } else if (event.key === "ArrowRight") {
        snake.setDirection("RIGHT");
      } else if (event.key === "ArrowUp") {
        snake.setDirection("UP");
      } else if (event.key === "ArrowDown") {
        snake.setDirection("DOWN");
      } else if (event.key === "r" || event.key === "R") {
        initGame();
      }
    });

    // Start the game
    initGame();
  </script>
</body>
</html>
